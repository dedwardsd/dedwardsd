AWSTemplateFormatVersion: 2010-09-09
Description: Architecting on AWS - Lab 4 - Creating a Highly Available Environment

# Lab VPC with 2 public + 2 private subnets
# 1 x NAT Gateway (Student adds a second)
# DB Subnet Group across the 2 private subnets
# RDS in Private Subnet

# Use public Systems Manager Parameter for Latest Amazon Linux 2 image
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  DBName:
    Type: String
    Default: inventory

  DBUsername:
    Type: String
    Default: dbadmin

  DBPassword:
    Type: String
    Default: lab-password
    NoEcho: True

Resources:
  ###########
  # VPC with Internet Gateway
  ###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IG

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  ###########
  # Public Route Table
  ###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: 
      - PublicSubnet1
      - PublicSubnet2
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  ###########
  # Private Route Table
  ###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

  ###########
  # Public Subnets x 2
  ###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPCtoIGWConnection
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPCtoIGWConnection
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ###########
  # Private Subnets x 2
  ###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: NATGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: NATGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: NATGatewayRoute
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: NATGatewayRoute
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  ###########
  # NAT Gateway
  ###########

  NATGateway:
    DependsOn: PublicRouteTableAssociation1
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NATGatewayEIP.AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  ###########
  # IAM Role for App
  ###########

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Inventory-App-Role
      Roles:
        - !Ref AppRole

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ###########
  # ALB Security Group
  ###########

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Inventory-ALB
      GroupDescription: Enable access to App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Inventory-ALB

  ###########
  # App Security Group
  ###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Inventory-App
      GroupDescription: Enable access to App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: Inventory-App

  ###########
  # DB Subnet Group
  ###########

  DBSubnetGroup:
    DependsOn:
      - PrivateRouteTableAssociation1
      - PrivateRouteTableAssociation2
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Lab-DB-Subnet-Group
#      DBSubnetGroupName: Lab-DB-Subnet-Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup

  ###########
  # DB Security Group
  ###########

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Inventory-DB
      GroupDescription: Enable access to MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: Inventory-DB

  ###########
  # RDS Database
  ###########

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: "inventory-cluster"
      Engine: aurora
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: "inventory"
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: inventory-db

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: inventory-primary
      Engine: aurora
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: "db.t3.small"
      DBSubnetGroupName: !Ref DBSubnetGroup


  ###########
  # EC2 Instance
  ###########

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - DatabasePrimaryInstance
      - PrivateRouteTableAssociation1
    Properties:
        ImageId: !Ref LatestAmiId
        SubnetId: !Ref PrivateSubnet1
        InstanceType: t3.micro
        IamInstanceProfile: !Ref InstanceProfile
        SecurityGroupIds:
        - !Ref AppSecurityGroup
        Tags:
        - Key: Name
          Value: AppServer
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum -y update

              # Install and enable AWS Systems Manager Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              # Install Apache Web Server and PHP
              yum install -y httpd mysql
              amazon-linux-extras install -y php7.2

              # Download Inventory App Lab files
              wget https://${AWS::Region}-tcprod.s3.${AWS::Region}.amazonaws.com/courses/ILT-TF-200-ARCHIT/v7.1.1/lab-4-HA/scripts/inventory-app.zip
              unzip inventory-app.zip -d /var/www/html/

              # Download and install the AWS SDK for PHP
              wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
              unzip -q aws.zip -d /var/www/html

              # Load Amazon Aurora DB connection details from AWS CloudFormation
              un="${DBUsername}"
              pw="${DBPassword}"
              ep="${DatabaseCluster.Endpoint.Address}"
              db="${DBName}"
              #mysql -u $un -p$pw -h $ep $db < /var/www/html/sql/inventory.sql

              # Populate PHP app settings with DB info
              sed -i "s/DBENDPOINT/$ep/g" /var/www/html/get-parameters.php
              sed -i "s/DBNAME/$db/g" /var/www/html/get-parameters.php
              sed -i "s/DBUSERNAME/$un/g" /var/www/html/get-parameters.php
              sed -i "s/DBPASSWORD/$pw/g" /var/www/html/get-parameters.php

              # Turn on web server
              systemctl start httpd.service
              systemctl enable httpd.service

  ###########
  # Application Load Balancer
  ###########

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - PublicRouteTableAssociation1
      - PublicRouteTableAssociation2
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Name: Inventory-LB
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /index.php
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: Inventory-App
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
      - Id:
          Ref: EC2Instance
        Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC


###########
# EC2 Enforcer Roles and Components
###########
  LambdaIamRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: LabInstanceCount
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                  -
                    Effect: "Allow"
                    Principal:
                        Service:
                          - lambda.amazonaws.com
                    Action:
                        - "sts:AssumeRole"
        Policies:
            -
                  PolicyName: "LambdaPolicy"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                          Effect: "Allow"
                          Action:
                              - ec2:*
                          Resource: "*"
                        -
                          Effect: "Allow"
                          Action:
                              - "logs:CreateLogGroup"
                              - "logs:CreateLogStream"
                              - "logs:PutLogEvents"
                          Resource: "*"

  RulesPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !Ref Ec2NumInstancesEnforcer
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: !GetAtt EventRule.Arn

  EventRule:
    Type: AWS::Events::Rule
    Properties:
        Description: "EventRule"
        EventPattern:
          source:
              -  "aws.ec2"
          detail-type:
              - "EC2 Instance State-change Notification"
          detail:
              state: ["running"]
        State: "ENABLED"
        Targets:
          -
              Arn: !GetAtt Ec2NumInstancesEnforcer.Arn
              Id: Lambda1

  Ec2NumInstancesEnforcer:
    Type: "AWS::Lambda::Function"
    Properties:
        FunctionName: Ec2NumInstancesEnforcer
        Handler: index.handler
        Role: !GetAtt LambdaIamRole.Arn
        Runtime: python3.7
        Environment:
          Variables:
              ALLOWED_REGIONS: !Ref AWS::Region
              MAX_INSTANCES: '4'
        Code:
          ZipFile: |
              import boto3
              import json
              import os
              allowed_regions=os.getenv('ALLOWED_REGIONS')
              max_instances=int(os.getenv('MAX_INSTANCES'))
              print('allowed regions', allowed_regions, 'max instances',max_instances)
              clients={}
              for region in allowed_regions.split(','):
                clients[region] = boto3.client('ec2',region_name=region)

              def numNonTerminatedInstances(client):
                useful_states=['pending','running','shutting-down','stopping','stopped']
                max_results=100
                ans=client.describe_instances(
                    Filters=[
                      {'Name': 'instance-state-name', 'Values':useful_states}
                    ],
                    MaxResults=max_results
                )
                return sum(map(lambda r: len(r['Instances']), ans['Reservations']))

              def numAllNonTerminatedInstances(clients):
                return sum(map(lambda client: numNonTerminatedInstances(client), clients.values()))

              def enforceInstance(instanceId, region):
                num_instances=numAllNonTerminatedInstances(clients)
                print('checking instance', instanceId, region, region in allowed_regions, num_instances)
                client_for_deleting=None
                if region not in allowed_regions:
                    client_for_deleting=boto3.client('ec2',region_name=region)
                elif num_instances > max_instances:
                    client_for_deleting=clients[region]
                if client_for_deleting:
                    try:
                      print( client_for_deleting.terminate_instances(InstanceIds= [instanceId]) )
                    except Exception as e:
                      print('problem deleting instance', instanceId, e)
                else:
                      print('Allowing instance', instanceId, region)

              def handler(event, context):
                print('event ...', event)
                region=event['region']
                instance_id=event['detail']['instance-id']
                enforceInstance(instance_id,region)

  ###########
# RDS Enforcer Roles and Components
###########
  RDSLambdaIamRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: LabRDSInstanceCount
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                  -
                    Effect: "Allow"
                    Principal:
                        Service:
                          - lambda.amazonaws.com
                    Action:
                        - "sts:AssumeRole"
        Policies:
            -
                  PolicyName: "LambdaPolicy"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                          Effect: "Allow"
                          Action:
                              - rds:*
                          Resource: "*"
                        -
                          Effect: "Allow"
                          Action:
                              - "logs:CreateLogGroup"
                              - "logs:CreateLogStream"
                              - "logs:PutLogEvents"
                          Resource: "*"

  RDSRulesPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !Ref RDSNumInstancesEnforcer
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: !GetAtt RDSEventRule.Arn

  RDSEventRule:
    Type: AWS::Events::Rule
    Properties:
        Description: "EventRule"
        EventPattern:
          source:
              -  "aws.rds"
          detail-type:
              - "AWS API Call via CloudTrail"
          detail:
              eventSource: ["rds.amazonaws.com"]
              eventName: ["CreateDBCluster", "CreateDBInstance"]
        State: "ENABLED"
        Targets:
          -
              Arn: !GetAtt RDSNumInstancesEnforcer.Arn
              Id: Lambda2

  RDSNumInstancesEnforcer:
    Type: "AWS::Lambda::Function"
    Properties:
        FunctionName: RDSNumInstancesEnforcer
        Handler: index.handler
        Role: !GetAtt RDSLambdaIamRole.Arn
        Runtime: python3.7
        Timeout : 900
        Environment:
          Variables:
              ALLOWED_REGIONS: !Ref AWS::Region
              MAX_INSTANCES: '3'
        Code:
          ZipFile: |
              import boto3
              import json
              import os
              import time
              max_instances=int(os.getenv('MAX_INSTANCES'))
              print('max instances', max_instances)
              dbClusterList=[]
                        
              def enforceInstance(region, dBClusterIdentifier):
                rdsclient = boto3.client('rds')
                count=0
                # list the RDS DB clusters
                cluster = rdsclient.describe_db_clusters()
                instance = rdsclient.describe_db_instances()
                print('clusters info...', cluster)
                print('instances info...', instance)
                print('length of db clusters..', len(cluster['DBClusters']))
                if len(cluster['DBClusters']) > max_instances or len(instance['DBInstances']) > max_instances:
                  try:
                    for instance in instance['DBInstances']:
                      print('deleting the cluster ',dBClusterIdentifier,' and the instance ', instance['DBInstanceIdentifier'])
                      rdsclient.delete_db_instance(DBInstanceIdentifier=instance['DBInstanceIdentifier'],SkipFinalSnapshot=True)
                    if(dBClusterIdentifier == ''):
                      rdsclient.delete_db_cluster(DBClusterIdentifier=instance['DBClusterIdentifier'],SkipFinalSnapshot=True)
                    else:
                      rdsclient.delete_db_cluster(DBClusterIdentifier=dBClusterIdentifier,SkipFinalSnapshot=True)

                  except Exception as e:
                    print(str(e))
                    for dbcluster in cluster['DBClusters']:
                      print('printing db cluster identifier',dbcluster['DBClusterIdentifier'], ' and status of the db cluster', dbcluster['Status'])
                      print('stopping all available DB clusters since there was an error deleting the instance that was created more than required')
                      rdsclient.stop_db_cluster(DBClusterIdentifier=dbcluster['DBClusterIdentifier'])              

              def handler(event, context):
                print('event ...', event)
                
                dBClusterIdentifier=''
                dBInstanceIdentifier=''
              
                region=event['region']
                if (event['detail']['eventName']) == 'CreateDBCluster':
                  
                  dBClusterIdentifier=event['detail']['requestParameters']['dBClusterIdentifier']
                  
                elif (event['detail']['eventName']) == 'CreateDBInstance':
                  
                  dBInstanceIdentifier=event['detail']['requestParameters']['dBInstanceIdentifier']
                  
                print ('The cluster that is creating:', str(dBClusterIdentifier), 'instance creating', str(dBInstanceIdentifier))
                enforceInstance(region,dBClusterIdentifier)

###########
# Outputs
###########

Outputs:
  InventoryAppSettingsPageURL:
    Value:
      !Join
        - ''
        - - 'http://'
          - !GetAtt ApplicationLoadBalancer.DNSName
          - '/settings.php'
    Description: Inventory app configuration page

  LabRegion:
    Value: !Ref AWS::Region
    Description: Lab Region

  AvailabilityZone1:
    Value: !Select
      - 0
      - !GetAZs

  AvailabilityZone2:
    Value: !Select
      - 1
      - !GetAZs

  InventoryAppURL:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Description: URL for the Inventory Application